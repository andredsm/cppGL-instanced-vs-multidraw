# CMake script to stringify a single shader file
# This script is called by the add_shader_headers function

# Check that required variables are provided
if(NOT DEFINED SHADER_FILE)
    message(FATAL_ERROR "SHADER_FILE must be defined")
endif()

if(NOT DEFINED OUTPUT_HEADER)
    message(FATAL_ERROR "OUTPUT_HEADER must be defined")
endif()

# Remove any extra quotes that might be present in paths
string(REGEX REPLACE "^\"(.*)\"$" "\\1" SHADER_FILE "${SHADER_FILE}")
string(REGEX REPLACE "^\"(.*)\"$" "\\1" OUTPUT_HEADER "${OUTPUT_HEADER}")

# Check if shader file exists
if(NOT EXISTS "${SHADER_FILE}")
    message(FATAL_ERROR "Shader file does not exist: ${SHADER_FILE}")
endif()

# Get the shader filename without path and extension for variable naming
get_filename_component(SHADER_NAME "${SHADER_FILE}" NAME_WE)
get_filename_component(SHADER_EXT "${SHADER_FILE}" EXT)

# Convert filename to valid C++ identifier
string(TOUPPER "${SHADER_NAME}" SHADER_NAME_UPPER)
string(REGEX REPLACE "[^A-Z0-9_]" "_" SHADER_NAME_UPPER "${SHADER_NAME_UPPER}")

# Determine shader type suffix
if(SHADER_EXT STREQUAL ".vert")
    set(SHADER_TYPE "VERTEX")
elseif(SHADER_EXT STREQUAL ".frag")
    set(SHADER_TYPE "FRAGMENT")
elseif(SHADER_EXT STREQUAL ".geom")
    set(SHADER_TYPE "GEOMETRY")
elseif(SHADER_EXT STREQUAL ".comp")
    set(SHADER_TYPE "COMPUTE")
elseif(SHADER_EXT STREQUAL ".tesc")
    set(SHADER_TYPE "TESS_CONTROL")
elseif(SHADER_EXT STREQUAL ".tese")
    set(SHADER_TYPE "TESS_EVALUATION")
else()
    set(SHADER_TYPE "SHADER")
endif()

set(VARIABLE_NAME "${SHADER_NAME_UPPER}_${SHADER_TYPE}_SHADER")

# Get the original filename for the comment
get_filename_component(SHADER_FILENAME "${SHADER_FILE}" NAME)

# Read the shader file content
file(READ "${SHADER_FILE}" SHADER_CONTENT)

# Ensure output directory exists
get_filename_component(OUTPUT_DIR "${OUTPUT_HEADER}" DIRECTORY)
file(MAKE_DIRECTORY "${OUTPUT_DIR}")

# Create the header content
# Note: We use a different delimiter to avoid conflicts with shader content
set(HEADER_CONTENT 
"#pragma once

// Auto-generated from ${SHADER_FILENAME}
// Do not edit this file directly!

#include <string>

namespace GeneratedShaders {

const std::string ${VARIABLE_NAME} = R\"SHADER_DELIMITER(${SHADER_CONTENT})SHADER_DELIMITER\";

} // namespace GeneratedShaders
")

# Write the header file
file(WRITE "${OUTPUT_HEADER}" "${HEADER_CONTENT}")

message(STATUS "Generated shader header: ${OUTPUT_HEADER}")